#
# Create an instance to act as a MIDI "hub". Assumes the presence of the
# default VPC in the chosen region.
#
# Further information: https://github.com/Brettles/midihub
#

AWSTemplateFormatVersion: 2010-09-09
Description: Deploy MidiHub on Ubuntu

Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t3.medium
    AllowedValues:
    - t3.nano
    - t3.micro
    - t3.small
    - t3.medium
    - t3.large
    - t3.xlarge
    - m5.large
    - c5.large
    ConstraintDescription: Must be a valid EC2 instance type.
  ListenerPorts:
    Description: Comma-separated list of UDP ports to listen on
    Type: String
    Default: 5008,5010

Outputs:
  ElasticIP:
    Description: Public IP address of MIDI hub server
    Value: !Ref ElasticIP
  GlobalIP:
    Description: Globally available IP addresses of MIDI hub server
    Value: !Join [',', !GetAtt GlobalAccelerator.Ipv4Addresses]
  LatencyStatisticsPage:
    Value: !Sub 'https://${CloudFrontDistribution.DomainName}/midihub.html'
  ParticipantsPage:
    Value: !Sub 'https://${CloudFrontDistribution.DomainName}/participants.html'
  ListenerPorts:
    Description: UDP ports for MIDI daemon
    Value: !Ref ListenerPorts
  LatencyEndpoint:
    Description: Substitute into midihub.html or call directly to see latency updates
    Value: !Sub ${APIGateway.ApiEndpoint}/latency
  ParticipantEndpoint:
    Description: Substitute into participants.html or call directly to see participants
    Value: !Sub ${APIGateway.ApiEndpoint}/participants

Mappings:
  AWSRegion2AMI:
    us-east-1:
      HVM64: ami-0149b2da6ceec4bb0
    us-west-2:
      HVM64: ami-0c09c7eb16d3e8e70
    us-west-1:
      HVM64: ami-03f6d497fceb40069
    eu-west-1:
      HVM64: ami-0fd8802f94ed1c969
    eu-west-2:
      HVM64: ami-04842bc62789b682e
    eu-west-3:
      HVM64: ami-064736ff8301af3ee
    eu-central-1:
      HVM64: ami-06148e0e81e5187c8
    ap-northeast-1:
      HVM64: ami-09b18720cb71042df
    ap-northeast-2:
      HVM64: ami-07d16c043aa8e5153
    ap-northeast-3:
      HVM64: ami-09d2f3a31110c6ad4
    ap-southeast-1:
      HVM64: ami-00e912d13fbb4f225
    ap-southeast-2:
      HVM64: ami-055166f8a8041fbf1
    ap-south-1:
      HVM64: ami-024c319d5d14b463e
    us-east-2:
      HVM64: ami-0d5bf08bc8017c83b
    ca-central-1:
      HVM64: ami-043a72cf696697251
    sa-east-1:
      HVM64: ami-00742e66d44c13cd9

Resources:
  MidiHubInstance:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            "/home/ubuntu/.aws/config":
              content: !Sub |
                [default]
                region = ${AWS::Region}
              mode: '000644'
              owner: ubuntu
              group: ubuntu
            "/home/ubuntu/midiports":
              content: !Sub ${ListenerPorts}
              mode: '000644'
              owner: ubuntu
              group: ubuntu
            "/home/ubuntu/dynamodbtable":
              content: !Sub ${DynamoDBTable}
              mode: '000644'
              owner: ubuntu
              group: ubuntu
            "/home/ubuntu/cloudfrontdistribution":
              content: !Sub ${CloudFrontDistribution}
              mode: '000644'
              owner: ubuntu
              group: ubuntu
            "/home/ubuntu/apigatewayendpoint":
              content: !Sub ${APIGateway.ApiEndpoint}/
              mode: '000644'
              owner: ubuntu
              group: ubuntu
            "/home/ubuntu/crontab.root":
            "/home/ubuntu/crontab.root":
              content: !Sub |
                @reboot sudo apt-get install linux-modules-extra-`uname -r` -y
              mode: '000644'
              owner: root
              group: root
            "/home/ubuntu/crontab.ubuntu":
              content: !Sub |
                @reboot mv /home/ubuntu/output.log /home/ubuntu/output.old
                @reboot rm /home/ubuntu/output-*.log
                * * * * * (cd /home/ubuntu; ./midihub.py) >>/home/ubuntu/output.log 2>&1
                * * * * * (cd /home/ubuntu; grep Latency *.log | ./update-latency.py)
                * * * * * (cd /home/ubuntu/midihub/; ./update-participants.py)
              mode: '000644'
              owner: ubuntu
              group: ubuntu
    Properties:
      ImageId: !FindInMap [AWSRegion2AMI, !Ref AWS::Region, HVM64]
      InstanceType: !Ref InstanceType
      Tags:
      - Key: Name
        Value: midiHub
      KeyName: !Ref KeyName
      IamInstanceProfile: !Ref InstanceProfile
      SecurityGroupIds:
      - !Ref SecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          sudo apt-get update -y
          sudo apt-get upgrade -y
          sudo apt-get install python3-pip -y
          mkdir -p /opt/aws/
          sudo pip3 install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-py3-latest.tar.gz
          sudo ln -s /usr/local/init/ubuntu/cfn-hup /etc/init.d/cfn-hup
          /usr/local/bin/cfn-init -v --stack ${AWS::StackName} --resource MidiHubInstance --region ${AWS::Region}
          /usr/local/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource MidiHubInstance --region ${AWS::Region}
          #
          # Why use three install lines rather than one?
          # Because sometimes you can request too many packages from the repo
          # host and it times out; then the whole build stops - that's mostly
          # inconvenient
          #
          sudo apt-get install cmake g++ pkg-config -y
          sudo apt-get install libavahi-client-dev libfmt-dev alsa-utils alsa-base -y
          sudo apt-get install libghc-alsa-core-dev avahi-utils linux-modules-extra-`uname -r` -y
          sudo pip3 install boto3
          cd /home/ubuntu
          git clone https://github.com/davidmoreno/rtpmidid
          cd rtpmidid
          make build
          cd /home/ubuntu
          git clone https://github.com/Brettles/midihub
          ln midihub/midihub.py midihub.py
          ln midihub/update-latency.py update-latency.py
          cd midihub
          python3 create-s3-bucket.py
          cd /home/ubuntu
          chmod +x midihub.py update-latency.py midihub/update-participants.py
          chown -R ubuntu:ubuntu *
          crontab -u ubuntu crontab.ubuntu
          sudo crontab -u root crontab.root
          sudo reboot

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub 'midiHub-${AWS::StackName}'
      GroupDescription: Enable SSH and RTP for MIDI
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      - IpProtocol: udp
        FromPort: 5000
        ToPort: 6000
        CidrIp: 0.0.0.0/0
      - IpProtocol: icmp
        FromPort: -1
        ToPort: -1
        CidrIp: 0.0.0.0/0

  ElasticIP:
    Type: AWS::EC2::EIP
    DependsOn: MidiHubInstance
    Properties: 
      InstanceId: !Ref MidiHubInstance

  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'midiHub-EC2-${AWS::StackName}'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: Lightsail
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - Lightsail:GetRegions
            Resource: '*'
      - PolicyName: DynamoDB
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action: 
            - dynamodb:BatchWriteItem
            - dynamodb:PutItem
            Resource: !GetAtt DynamoDBTable.Arn
      - PolicyName: CloudFront
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            -  cloudfront:GetDistributionConfig
            -  cloudfront:UpdateDistribution
            Resource: !Sub 'arn:${AWS::Partition}:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution}'
      - PolicyName: CloudFrontOAC
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action: cloudfront:CreateOriginAccessControl
            Resource: '*'
      - PolicyName: S3
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            -  s3:CreateBucket
            -  s3:PutBucketPolicy
            -  s3:PutObject
            Resource: '*'

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      InstanceProfileName: !Sub 'midiHub-${AWS::StackName}'
      Path: /
      Roles: 
      - !Ref InstanceRole

  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'midiHub-${AWS::StackName}'
      AttributeDefinitions:
      - AttributeName: "clientId"
        AttributeType: "S"
      KeySchema:
      - AttributeName: "clientId"
        KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      TimeToLiveSpecification:
        Enabled: True
        AttributeName: expiryTime

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'midiHub-Lambda-${AWS::StackName}'
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
            Action:
            - sts:AssumeRole
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - lambda.amazonaws.com
            Action:
            - sts:AssumeRole

  DynamoDBPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub 'midiHub-Lambda-DynamoDB-${AWS::StackName}'
      PolicyDocument:
        Statement:
          - Effect: Allow
            Resource: !GetAtt DynamoDBTable.Arn
            Action: dynamodb:Scan
      Roles:
        - !Ref LambdaRole

  LambdaGetLatencyStats:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'midiHub-GetLatencyStats-${AWS::StackName}'
      Handler: index.lambda_handler
      Runtime: python3.11
      Architectures: [arm64]
      Timeout: 20
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          TableName: !Ref DynamoDBTable
      Code:
        ZipFile: |
          import json
          import boto3
          import os
          import logging
          
          dynamodb = boto3.client('dynamodb')
          
          tableName = os.environ.get('TableName')
          
          logging.basicConfig()
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)
          
          def lambda_handler(event, context):
              global logger, tableName
          
              if not tableName:
                  logger.error('TableName not set - stopping')
                  return {'statusCode':500, 'body':'TableName not set'}
          
              paginator = dynamodb.get_paginator('scan')
              iterator = paginator.paginate(TableName=tableName)
          
              output = []
              for page in iterator:
                  for stat in page['Items']:
                      if stat['clientId']['S'] == 'Participants': continue

                      try:
                          (name,port) = stat['clientId']['S'].split('-')

                          item = {'clientName':name, 'clientPort':port, 'timestamp': stat['timestamp']['N'],
                                  'averageLatency':stat['averageLatency']['S'], 'maxLatency':stat['maxLatency']['S'],
                                  'minLatency':stat['minLatency']['S'], 'lastLatency':stat['lastLatency']['S']}
                      except:
                          logger.error(f'Cannot interpret item {stat}')
                          continue
          
                      output.append(item)

              return(output)

  LambdaGetParticipants:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'midiHub-GetParticipants-${AWS::StackName}'
      Handler: index.lambda_handler
      Runtime: python3.11
      Architectures: [arm64]
      Timeout: 20
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          TableName: !Ref DynamoDBTable
      Code:
        ZipFile: |
          import json
          import boto3
          import os
          import logging
          
          dynamodb = boto3.client('dynamodb')
          
          tableName = os.environ.get('TableName')
          
          logging.basicConfig()
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)
          
          def lambda_handler(event, context):
              global logger, tableName
          
              if not tableName:
                  logger.error('TableName not set - stopping')
                  return {'statusCode':500, 'body':'TableName not set'}
          
              try:
                  response = dynamodb.get_item(TableName=tableName, Key={'clientId':{'S':'Participants'}})
              except Exception as e:
                  logger.error(f'Did not get participants: {e}')
                  return {'statusCode':500, 'body':'Participants not found'}
          
              try:
                  participants = json.loads(response['Item']['list']['S'])
              except Exception as e:
                  logger.error(f'Cloud not load participants: {e}')
                  return {'statusCode':500, 'body':'Participants JSON error'}
          
              return(participants)

  APIGateway:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Sub 'midiHub-${AWS::StackName}'
      ProtocolType: HTTP
      CorsConfiguration:
        AllowHeaders:
        - "*"
        AllowMethods:
        - "*"
        ExposeHeaders:
        - "*"
        AllowOrigins:
        - "*"

  APIGatewayStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref APIGateway
      AutoDeploy: True
      StageName: $default

  IntegrationLatencyStats:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref APIGateway
      IntegrationType: AWS_PROXY
      IntegrationMethod: POST
      PayloadFormatVersion: 2.0
      IntegrationUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:midiHub-GetLatencyStats-${AWS::StackName}/invocations"

  ApiRouteLatencyStats:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref APIGateway
      RouteKey: "GET /latency"
      Target: !Join ["/", ["integrations", !Ref "IntegrationLatencyStats"]]

  LambdaPermissionLatencyStats:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !Ref LambdaGetLatencyStats
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${APIGateway}/*/*/latency"

  IntegrationParticipants:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref APIGateway
      IntegrationType: AWS_PROXY
      IntegrationMethod: POST
      PayloadFormatVersion: 2.0
      IntegrationUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:midiHub-GetParticipants-${AWS::StackName}/invocations"

  ApiRouteParticipants:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref APIGateway
      RouteKey: "GET /participants"
      Target: !Join ["/", ["integrations", !Ref "IntegrationParticipants"]]

  LambdaPermissionParticipants:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !Ref LambdaGetParticipants
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${APIGateway}/*/*/participants"

  GlobalAccelerator:
    Type: AWS::GlobalAccelerator::Accelerator
    Properties:
      Name: !Sub 'mibiHub-${AWS::StackName}'
      IpAddressType: IPV4
      Enabled: True

  GlobalAcceleratorListener:
    Type: AWS::GlobalAccelerator::Listener
    Properties:
      AcceleratorArn: !Ref GlobalAccelerator
      ClientAffinity: SOURCE_IP
      Protocol: UDP
      PortRanges:
      - FromPort: 5000
        ToPort: 6000

  GlobalAcceleratorEndpoint:
    Type: AWS::GlobalAccelerator::EndpointGroup
    Properties:
      ListenerArn: !Ref GlobalAcceleratorListener
      EndpointGroupRegion: !Sub ${AWS::Region}
      HealthCheckPort: 22
      HealthCheckProtocol: TCP
      EndpointConfigurations:
      - EndpointId: !GetAtt ElasticIP.AllocationId

  #
  # Dummy CloudFront distribution which will be modified when the EC2 instance
  # starts. A script on the instance will create a S3 bucket; modify the base
  # HTML file with the Lambda function URL; then update the CloudFront
  # distribution to point to the bucket.
  #
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Comment: !Sub 'mibiHub-${AWS::StackName}'
        DefaultRootObject: index.html
        Enabled: true
        HttpVersion: http2
        PriceClass: 'PriceClass_All'
        Origins:
        - Id: DefaultOrigin
          DomainName: aws.amazon.com
          CustomOriginConfig:
            OriginProtocolPolicy: https-only
        DefaultCacheBehavior:
          AllowedMethods:
          - GET
          - HEAD
          - OPTIONS
          TargetOriginId: DefaultOrigin
          ViewerProtocolPolicy: redirect-to-https
          ForwardedValues:
            QueryString: 'false'
            Cookies:
              Forward: none

